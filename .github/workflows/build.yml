name: Build, Release, and Deploy Docs

on:
  push:
    branches: [ "master" ]
    tags:
      - 'v*' # Trigger on tags like v1.0, v2.3.4
  pull_request:
    branches: [ "master" ]

env:
  BUILD_TYPE: Release

jobs:
  # ===============================================================
  # JOB 0: Filtruj zmiany w plikach
  # ===============================================================
  changes:
    runs-on: ubuntu-latest
    outputs:
      src_files: ${{ steps.filter.outputs.src_files }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            src_files:
              - 'src/**'
              - 'include/**'
              - 'luadoc/**'
              - 'pack/**'
              - 'CMakeLists.txt'
              - '.github/workflows/**'

  # ===============================================================
  # JOB 1: Build - teraz z warunkiem
  # ===============================================================
  build:
    needs: changes
    if: needs.changes.outputs.src_files == 'true' || github.event_name == 'pull_request'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Configure RPFM
        run: |
          Invoke-WebRequest -Uri "https://github.com/Frodo45127/rpfm/releases/download/v4.3.14/rpfm-v4.3.14-x86_64-pc-windows-msvc.zip" -OutFile "rpfm.zip"
          Expand-Archive -Path "rpfm.zip" -DestinationPath "rpfm"
          $rpfmPath = Join-Path (PWD) 'rpfm'; echo $rpfmPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DLUA_VERSION="5.1.2" -G Ninja
      - name: Build Project (including Docs)
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      - name: Archive Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: ${{github.workspace}}/build/release/*
      - name: Archive Documentation Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs-html
          path: ${{github.workspace}}/luadoc

  # ===============================================================
  # JOB 2: Deploy Docs
  # ===============================================================
  deploy-docs:
    needs: build
    runs-on: ubuntu-latest
    # Ten job uruchomi się tylko, jeśli 'build' się powiedzie (nie zostanie pominięty)
    if: github.event_name == 'push'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with: { path: main,
                fetch-depth: '0' }
      - uses: actions/download-artifact@v4
        with: { name: docs-html, path: new-docs }
      - id: docs_dir
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=$(echo $GITHUB_REF | sed 's/refs\/tags\/v//')
            echo "dir=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "dir=nightly" >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@v4
        with: { ref: gh-pages, path: gh-pages }
      - uses: actions/setup-python@v5
        with: { python-version: '3.x' }
      - name: Generate dynamic index.html
        run: |
          python main/.github/scripts/generate_doc_index.py \
            main/.github/docs_template/index.template.html \
            gh-pages/index.html \
            gh-pages \
            ${{ steps.docs_dir.outputs.dir }} \
            main
      - name: Prepare deployment directory
        run: |
          mkdir -p gh-pages/${{ steps.docs_dir.outputs.dir }}
          cp -r new-docs/* gh-pages/${{ steps.docs_dir.outputs.dir }}/
      - uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages
          keep_files: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

  # ===============================================================
  # JOB 3: Create an official GitHub Release (for tags)
  # ===============================================================
  create-official-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download release assets
        uses: actions/download-artifact@v4
        with: { name: release-assets, path: release-assets }
      - name: Remove useless stamp file
        run: rm -f release-assets/*.stamp
      - name: Create ZIP archive for the release
        id: archive
        run: |
          VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          ARCHIVE_NAME="libtwdll-${VERSION}.zip"
          zip -r -j "${ARCHIVE_NAME}" release-assets/
          mv "${ARCHIVE_NAME}" release-assets/
          echo "name=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT
      - name: Remove luadoc directory before upload
        run: rm -rf release-assets/luadoc
      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          body: |
            ## Quick Download
            **All files in one package: [`${{ steps.archive.outputs.name }}`](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ steps.archive.outputs.name }})**
            ---
            Individual files are attached below.
          files: release-assets/*

  # ===============================================================
  # JOB 4: Publish the Nightly Release - OSTATECZNA WERSJA Z POPRAWKĄ KODU ŹRÓDŁOWEGO
  # ===============================================================
  publish-nightly-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download release assets
        uses: actions/download-artifact@v4
        with: { name: release-assets, path: release-assets }

      - name: Remove useless stamp file
        run: rm -f release-assets/*.stamp

      - name: Create ZIP archive for nightly
        id: archive
        run: |
          ARCHIVE_NAME="libtwdll-nightly.zip"
          zip -r -j "${ARCHIVE_NAME}" release-assets/
          mv "${ARCHIVE_NAME}" release-assets/
          echo "name=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT

      - name: Remove luadoc directory before upload
        run: rm -rf release-assets/luadoc

      - name: Prepare Release Notes
        id: prep_notes
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          {
            echo "This is the latest development build from the **master** branch. Assets are automatically updated on every push."
            echo ""
            echo "## Quick Download"
            echo "**All files in one package: [\`${{ steps.archive.outputs.name }}\`](https://github.com/${{ github.repository }}/releases/download/nightly/${{ steps.archive.outputs.name }})**"
            echo ""
            echo "---"
            echo "**Build triggered by commit:** \`${COMMIT_SHA::7}\` ([view commit](https://github.com/${{ github.repository }}/commit/${COMMIT_SHA}))"
            echo ""
            echo "Individual files are attached below."
          } > release_notes.md

      - name: Delete old nightly release to update source code snapshot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release delete nightly --yes || true

      - name: Create New Nightly Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: 'nightly'
          name: 'Nightly Build (from master)'
          body_path: 'release_notes.md'
          prerelease: true
          files: release-assets/*